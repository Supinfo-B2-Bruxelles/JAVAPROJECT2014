package Jeu;

import java.io.*; 

import Personage.Personage;

public class ListeScore implements java.io.Serializable {
	protected Score [] listeDesScores;
	protected Integer level;

	public Score[] getListeDesScores() 
		{
			return listeDesScores;
		}

	public void setListeDesScores(Score[] listeDesScores) 
		{
			this.listeDesScores = listeDesScores;
		}
	
	public Integer getLevel() 
		{
			return level;
		}

	public void setLevel(Integer level) 
		{
			this.level = level;
		}

	public ListeScore ()
		{
			this.initialisationListe();
		}
	public ListeScore (Integer level)
		{
			this.initialisationListe();
			this.setLevel(level);
		}
	
	public void initialisationListe()
		{
			Score liste[]= new Score [0];
			this.setListeDesScores(liste);
		}
	public void genererListeAPartirDuFichier(Integer level)
		{
			this.setLevel(level);
			FileInputStream fis = null;
			ObjectInputStream ois = null;
			File fichier = new File("Scores\\level"+this.getLevel()+".txt");
			if (fichier.exists())
				{
					try 
						{
							ListeScore liste= new ListeScore();
							fis = new FileInputStream("Scores\\level"+level+".txt");
							ois = new ObjectInputStream(fis);
							try 
								{
									liste = (ListeScore) ois.readObject();
								} 
							catch (ClassNotFoundException e) 
								{
								
									e.printStackTrace();
								}
							this.listeDesScores = liste.listeDesScores;
							
						} 
					catch (IOException e) 
						{
							System.out.println(e.toString());
						} 
					finally 
						{ 
							try
								{
									fis.close();
									ois.close();
								}
							catch (IOException e) 
								{
									System.out.println(e.toString());
								}
							
							
						}
				}
			

		}
	public void miseAJourDesScores(Personage joueur, Plateau plat)
		{
			//préparation de l'objet liste
			this.genererListeAPartirDuFichier(joueur.getLevel());
			
			if (this.getListeDesScores().length==0)
				{
					Score[] liste= new Score [1];
					for (Integer i=0; i<1; i++)
					{
						Score scNull = new Score();
						liste[i]=scNull;
					}
					System.out.println(liste[0].getLevel());
					liste[0].setLevel(joueur.getLevel());
					liste[0].setNom(joueur.getNom());
					liste[0].setNombreDeplacement(plat.getNombreDeplacement());
					liste[0].setTimeStampDebut(plat.getTimeStampDebut());
					liste[0].setTimeStampFin(plat.getTimeStampFin());
				}
			else
				{
					Score[] liste= new Score [(this.getListeDesScores().length)+1];
					for (Integer i=0; i<this.getListeDesScores().length; i++)
						{
							liste[i]=this.getListeDesScores()[i];		
						}
					liste[this.getListeDesScores().length].setLevel(joueur.getLevel());
					liste[this.getListeDesScores().length].setNom(joueur.getNom());
					liste[this.getListeDesScores().length].setNombreDeplacement(plat.getNombreDeplacement());
					liste[this.getListeDesScores().length].setTimeStampDebut(plat.getTimeStampDebut());
					liste[this.getListeDesScores().length].setTimeStampFin(plat.getTimeStampFin());
					
				}
			
			
			//stocage de l'objet liste dans un fichier
			FileOutputStream fos = null;
			ObjectOutputStream oos = null;
			File MyFile = new File("Scores\\level"+this.getLevel()+".txt");
			MyFile.delete(); 
			try 
				{
					
			
					fos = new FileOutputStream("Scores\\level"+this.getLevel()+".txt");
					oos = new ObjectOutputStream(fos);
					//création du fichier si il n'existe pas
					File fichier = new File("Scores\\level"+this.getLevel()+".txt");	
					if (! fichier.exists())
						{
						  fichier.createNewFile();
						}
					//écriture de l'objet dans le fichier
					oos.writeObject(this); 	// Serialization
				} 
			catch (IOException e)
				{
					System.out.println(e.toString());
				}
			finally 
				{
					try
						{
						   fos.close();
						   oos.close();
						}
					catch (IOException e)
						{
							System.out.println(e.toString());
						}
					
				}
			
		}
	
	public void genererListeAPartirDesFichier()
		{
			String[] listeFichierScores;
			this.setTailleDuTableauDeScore();
			
			
			try
				{      
		         
				File dossier = new File("Scores\\level"+this.getLevel());
		         
		         
		         listeFichierScores = dossier.list();
		         
		         Integer i=0;
		         
		         
		         for (String fichier : listeFichierScores)
		         	{
		        	 	this.setLevel(level);
			 			FileInputStream fis = null;
			 			ObjectInputStream ois = null;
			 			//File fichierAOuvrir = new File(fichier.getName());
			 			
			 			
			 			
	 					try 
	 						{
	 							
	 							fis = new FileInputStream("Scores\\level"+this.getLevel()+"\\"+fichier);
	 							ois = new ObjectInputStream(fis);
	 							Score scoreUnite = new Score();
	 							try 
	 								{
	 									scoreUnite = (Score) ois.readObject();
	 									this.listeDesScores[i] = scoreUnite;
	 									i++;
	 									
	 								} 
	 							catch (ClassNotFoundException e) 
	 								{
	 								
	 									e.printStackTrace();
	 								}
	 							//this.listeDesScores = liste.listeDesScores;
	 							
	 							
	 							
	 						} 
	 					catch (IOException e) 
	 						{
	 							System.out.println(e.toString());
	 						} 
	 					finally 
	 						{ 
	 							try
	 								{
	 									fis.close();
	 									ois.close();
	 								}
	 							catch (IOException e) 
	 								{
	 									System.out.println(e.toString());
	 								}
	 							
	 							
	 						}
			 				
		         	}
		         this.classementParOrdre ();
		      }
			catch(Exception e)
				{
		        
		         e.printStackTrace();
				}
		}
	public void classementParOrdre ()
		{
			Score [] tabScore = new Score [this.getListeDesScores().length];
			int sortir=0;
			
			while (sortir==0)
				{
					sortir=1;
					
					for (int i=0;i<this.getListeDesScores().length-1;i=i+1)
						{
							if (this.getListeDesScores()[i].getNombreDeplacement()>this.getListeDesScores()[i+1].getNombreDeplacement())
								{
									Score plus_petit=this.getListeDesScores()[i+1];
									Score plus_grand=this.getListeDesScores()[i];
									this.getListeDesScores()[i+1]= plus_grand;
									this.getListeDesScores()[i]=plus_petit;
									sortir=0;
								}
							else if (this.getListeDesScores()[i].getNombreDeplacement()==this.getListeDesScores()[i+1].getNombreDeplacement())
								{
									if (this.getListeDesScores()[i].getTimeStampFin()-this.getListeDesScores()[i].getTimeStampDebut()>this.getListeDesScores()[i+1].getTimeStampFin()-this.getListeDesScores()[i+1].getTimeStampDebut())
										{
											Score plus_petit=this.getListeDesScores()[i+1];
											Score plus_grand=this.getListeDesScores()[i];
											this.getListeDesScores()[i+1]= plus_grand;
											this.getListeDesScores()[i]=plus_petit;
											sortir=0;
										}
								}
						}
				}
			
			
		
			
		}
	public void setTailleDuTableauDeScore()
		{
			String[] listeFichierScores;
			
			
			     
		         
			File dossier = new File("Scores\\level"+this.getLevel());
	         
	         
	         listeFichierScores = dossier.list();
	         
	         //Integer i=listeFichierScores.length;
	         Integer i=0;
	         for (String fichier : listeFichierScores)
	         	{
	        	 i++;
	         	}
	         
	         Score liste[]= new Score [i];
			this.setListeDesScores(liste);
	         
				
		         
		         
		         
		}
	public void afficherLesScores()
		{
			Integer classement=0;
			System.out.println(this.getListeDesScores()[1].getNom());
			for (Score score : this.getListeDesScores())
				{
					long temps= score.getTimeStampFin()-score.getTimeStampDebut();
					long minutes = temps/(60*1000);
					long secondes = (temps%(60*1000))/1000;
					
					classement++;
					
					System.out.println(classement+". pseudo: "+score.getNom()+" temps: "+minutes+"m"+secondes+"s mouvement: "+score.getNombreDeplacement());
				}
		}
}
